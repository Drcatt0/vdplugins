(function(p,s,e,c){"use strict";const Patcher=e.patcher.create("MarkAllAsRead"),{getByProps:getByProps,getByStoreName:getByStoreName}=s,AckUtils=getByProps("bulkAck"),ReadStateStore=getByStoreName("ReadStateStore"),ChannelStore=getByStoreName("ChannelStore");const markAllAsRead=()=>{try{let toRead=[];const allReadStates=ReadStateStore.getAllReadStates().map(m=>({...m})),onlyUnreadOrMentions=allReadStates.filter(m=>ReadStateStore.hasUnread(m.channelId));const UnreadDMs=onlyUnreadOrMentions.filter(m=>ChannelStore.getChannel(m.channelId)?.isDM()).map(m=>({channelId:m.channelId,messageId:m._lastMessageId})),UnreadGuildChannels=onlyUnreadOrMentions.filter(m=>ChannelStore.getChannel(m.channelId)?.getGuildId()).map(m=>({channelId:m.channelId,messageId:m._lastMessageId}));toRead.push(...UnreadDMs,...UnreadGuildChannels);AckUtils.bulkAck(toRead);e.ui.toasts.show("Marked all messages as read")}catch(err){console.error("Error marking messages as read:",err)}};const plugin={onLoad(){c.registerCommand({name:"readall",displayName:"readall",description:"Marks all messages and servers as read.",displayDescription:"Marks all messages and servers as read.",type:1,inputType:1,execute:markAllAsRead})},onUnload(){Patcher.unpatchAll()}};return p.default=plugin,Object.defineProperty(p,"__esModule",{value:true}),p})({},vendetta.metro,vendetta.metro.common,vendetta.commands);
